package ohnosequences.db.cpr16s.test

import com.amazonaws.services.s3._, transfer._
import com.amazonaws.auth._
import ohnosequences.awstools.s3._
import ohnosequences.db

/* Copy data in S3 generated by dropInconsistentAssignments filter to a location defined in main/scala/release.scala */
case object releaseData {

  def apply(credentials: AWSCredentialsProvider): Unit = {

    val s3 = S3Client(credentials = credentials)
    val transferManager = s3.createTransferManager

    /* This code generates a list of pairs for all objects in the source folder to the objects in the new folder (because transferManager.copy doesn't work for folders) */
    val blastdbSource = dropInconsistentAssignmentsAndGenerate.s3
    val blastdbMap = s3
      .listObjects(blastdbSource)
      .getOrElse(sys.error(s"Couldn't list objects in ${blastdbSource}"))
      .flatMap { obj =>
        obj.key.split('/').lastOption.map { name =>
          obj -> (db.cpr16s.data.blastDBS3 / name)
        }
      }

    copyData(transferManager)(
      (dropInconsistentAssignments.output.fasta.s3 -> db.cpr16s.data.fastaS3) ::
      (dropInconsistentAssignments.output.table.s3 -> db.cpr16s.data.id2taxasS3) ::
      blastdbMap
    )

    transferManager.shutdownNow()
  }


  def copyData(transferManager: TransferManager)(pairs: Seq[(AnyS3Address, AnyS3Address)]): Unit = {
    pairs.foreach { case (source, target) =>
      println(s"Copying ${source}")
      println(s"     to ${target}")

      transferManager.copy(
        source.bucket, source.key,
        target.bucket, target.key
      ).waitForCompletion

      println("Done!")
    }
  }

}
